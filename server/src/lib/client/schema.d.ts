/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/oauth2/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Obtain OAuth2 Access Token
         * @description Allowed role: `USER` or `PARTNER`
         */
        post: operations["createOAuth2Token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user information
         * @description Allowed role: `USER`
         */
        get: operations["getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link user to a partner client application
         * @description Allowed role: `PARTNER`
         */
        post: operations["linkUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{externalUserId}/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Disconnect user from partner client application
         * @description Allowed role: `PARTNER`
         */
        delete: operations["disconnectUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{externalUserId}/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user orders information by external user id
         * @description Allowed role: `PARTNER`
         */
        get: operations["getOrdersByExternalUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{externalUserId}/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user order information by external user id
         * @description Allowed role: `PARTNER`
         */
        get: operations["getOrderByExternalUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user contracts information
         * @description Allowed role: `USER`
         */
        get: operations["getContracts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contractId}/energy-consumption": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user contract smart meter consumption
         * @description Allowed role: `USER`
         */
        get: operations["getContractEnergyConsumption"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{externalUserId}/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user contracts information by external user id
         * @description Allowed role: `PARTNER`
         */
        get: operations["getContractsByExternalUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{externalUserId}/contracts/{contractId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user contract information by external user id
         * @description Allowed role: `PARTNER`
         */
        get: operations["getContractByExternalUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{externalUserId}/contracts/{contractId}/energy-consumption": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user contract smart meter consumption by external user id
         * @description Allowed role: `PARTNER`
         */
        get: operations["getContractEnergyConsumptionByExternalUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/spot-prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve day-ahead spot price information
         * @description Allowed role: `USER` or `PARTNER`
         */
        get: operations["getSpotPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve product prices
         * @description Allowed role: `PARTNER`
         */
        get: operations["getProductPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all webhooks
         * @description Allowed role: `PARTNER`
         */
        get: operations["getWebhooks"];
        put?: never;
        /**
         * Create a new webhook
         * @description Allowed role: `PARTNER`
         */
        post: operations["createWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a webhook
         * @description Allowed role: `PARTNER`
         */
        get: operations["getWebhook"];
        put?: never;
        post?: never;
        /**
         * Delete a webhook
         * @description Allowed role: `PARTNER`
         */
        delete: operations["deleteWebhook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{id}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test a webhook
         * @description Allowed role: `PARTNER`
         */
        post: operations["testWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6I...",
         *       "expires_in": 3600,
         *       "token_type": "Bearer"
         *     } */
        OAuth2TokenResponse: {
            /** @description The access token to use for authentication */
            access_token?: string;
            /** @description The number of seconds until the token expires */
            expires_in?: number;
            /** @description The type of the token */
            token_type?: string;
        };
        /** @example {
         *       "error": "invalid_request",
         *       "error_description": "The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed."
         *     } */
        OAuth2TokenError400: {
            /** @description The type of the error */
            error?: string;
            /** @description A human-readable message providing more details about the error */
            error_description?: string;
        };
        /** @example {
         *       "error": "invalid_client",
         *       "error_description": "Client authentication failed (e.g., unknown client or unsupported authentication method)."
         *     } */
        OAuth2TokenError401: {
            /** @description The type of the error */
            error?: string;
            /** @description A human-readable message providing more details about the error */
            error_description?: string;
        };
        /** @example {
         *       "type": "bad_request",
         *       "detail": "invalid fields array..."
         *     } */
        BadRequestError400: {
            /** @description The type of the error */
            type?: string;
            /** @description A human-readable message providing more details about the error */
            detail?: string;
        };
        /** @example {
         *       "type": "unauthorized",
         *       "detail": "Unauthorized API access."
         *     } */
        UnauthorizedError401: {
            /** @description The type of the error */
            type?: string;
            /** @description A human-readable message providing more details about the error */
            detail?: string;
        };
        /** @example {
         *       "type": "not_found",
         *       "detail": "information about not found object..."
         *     } */
        BadRequestError404: {
            /** @description The type of the error */
            type?: string;
            /** @description A human-readable message providing more details about the error */
            detail?: string;
        };
        /** @example {
         *       "type": "too_many_requests",
         *       "detail": "API request limit per minute has been reached. Please try again later."
         *     } */
        TooManyRequestError429: {
            /** @description The type of the error */
            type?: string;
            /** @description A human-readable message providing more details about the error */
            detail?: string;
        };
        /** @example {
         *       "email": "dummy-email@ostrom-api.io",
         *       "firstName": "Max",
         *       "lastName": "Mustermann",
         *       "language": "GERMAN"
         *     } */
        GetMeResponse: {
            /** @description The email address of the user */
            email?: string;
            /** @description The first name of the user */
            firstName?: string;
            /** @description The last name of the user */
            lastName?: string;
            /**
             * @description The language of the user
             * @enum {string}
             */
            language?: "ENGLISH" | "GERMAN";
        };
        /** @example {
         *       "linkUrl": "https://join.ostrom.de/link?id=hZTY3Zjc3QDI2YzI1MDExLTdhYTctNGE2NS1iNjBmLTZmMzc5NmRhODUyMDowNDViYjFiYmE0M2Y5NDU5YTc5OTgxZmEyYTg1Nm"
         *     } */
        UserLinkResponse: {
            /** @description The url used inside the partner app to open the Ostrom linking page */
            linkUrl?: string;
        };
        GetOrdersResponse: {
            /** @description Order data */
            data?: components["schemas"]["GetOrdersItemResponse"][];
        };
        /** @example {
         *       "id": "100523456",
         *       "type": "ELECTRICITY",
         *       "productCode": "SIMPLY_DYNAMIC",
         *       "status": "VERIFIED",
         *       "customerFirstName": "Max",
         *       "customerLastName": "Mustermann",
         *       "address": {
         *         "zip": "22083",
         *         "city": "Hamburg",
         *         "street": "Mozartstr.",
         *         "houseNumber": "35"
         *       }
         *     } */
        GetOrdersItemResponse: {
            /** @description The id of the order */
            id?: number;
            /** @description type of the order */
            type?: string;
            /** @description Product code of the order */
            productCode?: string;
            /** @description Status of the order */
            status?: string;
            /** @description Customer first name */
            customerFirstName?: string;
            /** @description Customer last name */
            customerLastName?: string;
            address?: components["schemas"]["GetOrdersAddressResponse"];
        };
        /** @description The address of the order */
        GetOrdersAddressResponse: {
            /** @description The zip code of the address */
            zip?: string;
            /** @description The city of the address */
            city?: string;
            /** @description The street of the address */
            street?: string;
            /** @description The house number of the address */
            houseNumber?: string;
        };
        GetContractsResponse: {
            /** @description Contact data */
            data?: components["schemas"]["GetContractsItemResponse"][];
        };
        /** @example {
         *       "id": "100523456",
         *       "type": "ELECTRICITY",
         *       "productCode": "SIMPLY_DYNAMIC",
         *       "status": "ACTIVE",
         *       "customerFirstName": "Max",
         *       "customerLastName": "Mustermann",
         *       "startDate": "2024-03-22",
         *       "currentMonthlyDepositAmount": 120,
         *       "address": {
         *         "zip": "22083",
         *         "city": "Hamburg",
         *         "street": "Mozartstr.",
         *         "houseNumber": "35"
         *       }
         *     } */
        GetContractsItemResponse: {
            /** @description The id of the contract */
            id?: number;
            /** @description type of the contract */
            type?: string;
            /** @description Product code of the contract */
            productCode?: string;
            /** @description Status of the contract */
            status?: string;
            /** @description Customer first name */
            customerFirstName?: string;
            /** @description Customer last name */
            customerLastName?: string;
            /** @description Start date of the contract in ISO format */
            startDate?: string;
            /** @description Current monthly deposit amount in EUR of the contract */
            currentMonthlyDepositAmount?: string;
            address?: components["schemas"]["GetContractsAddressResponse"];
        };
        /** @description The address of the contract */
        GetContractsAddressResponse: {
            /** @description The zip code of the address */
            zip?: string;
            /** @description The city of the address */
            city?: string;
            /** @description The street of the address */
            street?: string;
            /** @description The house number of the address */
            houseNumber?: string;
        };
        GetContractsEnergyConsumptionResponse: {
            /** @description The energy consumption data */
            data?: components["schemas"]["GetContractsEnergyConsumptionItemResponse"][];
        };
        GetContractsEnergyConsumptionItemResponse: {
            /**
             * @description The date of the energy consumption data (start from)
             * @example 2023-10-22T01:00:00.000Z
             */
            date?: string;
            /**
             * @description The energy consumption in kWh
             * @example 0.48
             */
            kWh?: number;
        };
        GetSpotPriceResponse: {
            /** @description The spot price data */
            data?: components["schemas"]["GetSpotPriceItemResponse"][];
        };
        GetSpotPriceItemResponse: {
            /**
             * @description The date of the day-ahead spot price data (start from)
             * @example 2023-10-22T01:00:00.000Z
             */
            date?: string;
            /**
             * @description The MWh day-ahead spot price without VAT in EUR
             * @example 926
             */
            netMwhPrice?: number;
            /**
             * @description The kWh day-ahead spot price without VAT in cents
             * @example 92.6
             */
            netKwhPrice?: number;
            /**
             * @description The kWh day-ahead spot price with VAT in cents
             * @example 110.2
             */
            grossKwhPrice?: number;
            /**
             * @description The kWh taxes and levies day-ahead spot price without VAT in cents
             * @example 16.2
             */
            netKwhTaxAndLevies?: number;
            /**
             * @description The kWh taxes and levies day-ahead spot price with VAT in cents
             * @example 19.28
             */
            grossKwhTaxAndLevies?: number;
            /**
             * @description The monthly Ostrom base fee without VAT in EUR
             * @example 5.04
             */
            netMonthlyOstromBaseFee?: number;
            /**
             * @description The monthly Ostrom base fee with VAT in EUR
             * @example 6
             */
            grossMonthlyOstromBaseFee?: number;
            /**
             * @description The monthly grid fees without VAT in EUR
             * @example 3.84
             */
            netMonthlyGridFees?: number;
            /**
             * @description The monthly grid fees with VAT in EUR
             * @example 4.57
             */
            grossMonthlyGridFees?: number;
        };
        /** @example {
         *       "id": "12345",
         *       "clientApplicationId": "ac11591e05vtf752a63vdi54b83k3f4",
         *       "url": "https://partner-example.com/webhook"
         *     } */
        CreateWebhookResponse: {
            /** @description The id of the webhook */
            id?: number;
            /** @description The id of the partner's client application that owns the webhook */
            clientApplicationId?: string;
            /** @description The url where the webhook events will be sent */
            url?: string;
        };
        /** @example {
         *       "id": "12345",
         *       "clientApplicationId": "ac11591e05vtf752a63vdi54b83k3f4",
         *       "url": "https://partner-example.com/webhook"
         *     } */
        GetWebhookResponse: {
            /** @description The id of the webhook */
            id?: number;
            /** @description The id of the partner's client application that owns the webhook */
            clientApplicationId?: string;
            /** @description The url where the webhook events will be sent */
            url?: string;
        };
        GetWebhooksResponse: {
            /** @description webhook data */
            data?: components["schemas"]["GetWebhooksItemResponse"][];
        };
        /** @example {
         *       "id": "12345",
         *       "clientApplicationId": "ac11591e05vtf752a63vdi54b83k3f4",
         *       "url": "https://partner-example.com/webhook"
         *     } */
        GetWebhooksItemResponse: {
            /** @description The id of the webhook */
            id?: number;
            /** @description The id of the partner's client application that owns the webhook */
            clientApplicationId?: string;
            /** @description The url where the webhook events will be sent */
            url?: string;
        };
        /** @example {
         *       "id": "12345",
         *       "clientApplicationId": "ac11591e05vtf752a63vdi54b83k3f4",
         *       "url": "https://partner-example.com/webhook"
         *     } */
        DeleteWebhookResponse: {
            /** @description The id of the webhook */
            id?: number;
            /** @description The id of the partner's client application that owns the webhook */
            clientApplicationId?: string;
            /** @description The url where the webhook events will be sent */
            url?: string;
        };
        /** @example {
         *       "id": "12345",
         *       "clientApplicationId": "19b79v2f5bd594405342deoebc38df1",
         *       "url": "https://partner-example.com/webhook"
         *     } */
        TestWebhookResponse: {
            /** @description The id of the webhook */
            id?: number;
            /** @description The id of the partner's client application that owns the webhook */
            clientApplicationId?: string;
            /** @description The url where the webhook events will be sent */
            url?: string;
        };
        GetProductPriceResponse: {
            /** @description Product price data */
            data?: components["schemas"]["GetProductPriceItemResponse"][];
        };
        GetProductPriceItemResponse: {
            /**
             * @description The product code
             * @example SIMPLY_DYNAMIC
             */
            code?: string;
            /**
             * @description The kWh product price without VAT in cents
             * @example 92.6
             */
            netKwhPrice?: number;
            /**
             * @description The kWh product price with VAT in cents
             * @example 110.2
             */
            grossKwhPrice?: number;
            /**
             * @description The kWh taxes and levies product price without VAT in cents
             * @example 16.2
             */
            netKwhTaxAndLevies?: number;
            /**
             * @description The kWh taxes and levies product price with VAT in cents
             * @example 19.28
             */
            grossKwhTaxAndLevies?: number;
            /**
             * @description The monthly Ostrom base fee without VAT in EUR
             * @example 5.04
             */
            netMonthlyOstromBaseFee?: number;
            /**
             * @description The monthly Ostrom base fee with VAT in EUR
             * @example 6
             */
            grossMonthlyOstromBaseFee?: number;
            /**
             * @description The monthly grid fees without VAT in EUR
             * @example 3.84
             */
            netMonthlyGridFees?: number;
            /**
             * @description The monthly grid fees with VAT in EUR
             * @example 4.57
             */
            grossMonthlyGridFees?: number;
            /**
             * @description The unit price without VAT in cents
             * @example 25.76
             */
            netKwhUnitPrice?: number;
            /**
             * @description The unit price with VAT in cents
             * @example 30.66
             */
            grossKwhUnitPrice?: number;
            /**
             * @description The monthly deposit amount in EUR
             * @example 60
             */
            monthlyDeposit?: number;
            /**
             * @description The yearly consumption in kWh
             * @example 2000
             */
            yearlyComsumption?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createOAuth2Token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The Oauth grant type (e.g. client_credentials) */
                    grant_type: string;
                };
            };
        };
        responses: {
            /** @description Successful token acquisition */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2TokenResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2TokenError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2TokenError401"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMeResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    linkUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Partner user unique identifier */
                    externalUserId: string;
                    /** @description Partner referral code to provide a discount to the user in case of signup, if not provided the signup is disabled during the account linking. */
                    referralCode?: string;
                    /**
                     * @description Language of the Ostrom connect page.
                     * @enum {string}
                     */
                    language: "en-US" | "de-DE";
                    /** @description Partner mobile app page link where the user is redirected after connect the contract. */
                    redirectUrl: string;
                    /** @description The scopes you wish to request access to when linking the user contract. */
                    scopes: ("order:read:data" | "contract:read:data")[];
                };
            };
        };
        responses: {
            /** @description Successful user link */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLinkResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    disconnectUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner user unique identifier */
                externalUserId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user disconnection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getOrdersByExternalUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner user unique identifier */
                externalUserId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user order data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getOrderByExternalUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner user unique identifier */
                externalUserId: string;
                /** @description ID of the order */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user order data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersItemResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getContracts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user contract data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractsResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getContractEnergyConsumption: {
        parameters: {
            query: {
                /** @description start date ISO format on UTC timezone. e.g. 2023-11-01T00:00:00.000Z */
                startDate: string;
                /** @description end date ISO format on UTC timezone. e.g. 2023-11-02T00:00:00.000Z */
                endDate: string;
                /** @description The unit of time the data will be aggregated */
                resolution: "HOUR" | "DAY" | "MONTH";
            };
            header?: never;
            path: {
                /** @description ID of the contract */
                contractId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user contract energy consumption data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractsEnergyConsumptionResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getContractsByExternalUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner user unique identifier */
                externalUserId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user contract data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractsResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getContractByExternalUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Partner user unique identifier */
                externalUserId: string;
                /** @description ID of the contract */
                contractId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user contract data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractsItemResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getContractEnergyConsumptionByExternalUserId: {
        parameters: {
            query: {
                /** @description start date ISO format on UTC timezone. e.g. 2023-11-01T00:00:00.000Z */
                startDate: string;
                /** @description end date ISO format on UTC timezone. e.g. 2023-11-02T00:00:00.000Z */
                endDate: string;
                /** @description The unit of time the data will be aggregated */
                resolution: "HOUR" | "DAY" | "MONTH";
            };
            header?: never;
            path: {
                /** @description Partner user unique identifier */
                externalUserId: string;
                /** @description ID of the contract */
                contractId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful user contract energy consumption data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractsEnergyConsumptionResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getSpotPrices: {
        parameters: {
            query: {
                /** @description start date ISO format on UTC timezone. e.g. 2023-11-01T00:00:00.000Z */
                startDate: string;
                /** @description end date ISO format on UTC timezone. e.g. 2023-11-02T00:00:00.000Z */
                endDate: string;
                /** @description The unit of time the data will be aggregated */
                resolution: "HOUR";
                /** @description Zip code used to fetch Ostrom base price, gridFees, tax and levies. If not provided the respective values are returned as zero. */
                zip?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful spot price data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSpotPriceResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getProductPrices: {
        parameters: {
            query: {
                /** @description The postal code where the tariff will be calculated */
                zip: string;
                /** @description The number of people in the household, if not provided the default value will be 1 */
                numberOfResidents?: number;
                /** @description The amount of yearly consumption of the household, if not provided the default value will be 1400 kWh */
                yearlyConsumption?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful product prices data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductPriceResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getWebhooks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful webhook data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetWebhooksResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    createWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The URL of the webhook */
                    url: string;
                    /** @description The secret of the webhook */
                    secret: string;
                };
            };
        };
        responses: {
            /** @description Successful webhook creation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateWebhookResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    getWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the webhook */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful webhook data fetch */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetWebhookResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    deleteWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the webhook */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful webhook deletion */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteWebhookResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
    testWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the webhook */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful webhook test */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestWebhookResponse"];
                };
            };
            /** @description The request is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError400"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedError401"];
                };
            };
            /** @description Entity with the provided id was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError404"];
                };
            };
            /** @description Too Many Requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TooManyRequestError429"];
                };
            };
        };
    };
}
